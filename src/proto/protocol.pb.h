// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace mastodon_blender_view {
class AddMovingSpotRequest;
struct AddMovingSpotRequestDefaultTypeInternal;
extern AddMovingSpotRequestDefaultTypeInternal _AddMovingSpotRequest_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace mastodon_blender_view
PROTOBUF_NAMESPACE_OPEN
template<> ::mastodon_blender_view::AddMovingSpotRequest* Arena::CreateMaybeMessage<::mastodon_blender_view::AddMovingSpotRequest>(Arena*);
template<> ::mastodon_blender_view::Empty* Arena::CreateMaybeMessage<::mastodon_blender_view::Empty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mastodon_blender_view {

// ===================================================================

class AddMovingSpotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mastodon_blender_view.AddMovingSpotRequest) */ {
 public:
  inline AddMovingSpotRequest() : AddMovingSpotRequest(nullptr) {}
  ~AddMovingSpotRequest() override;
  explicit PROTOBUF_CONSTEXPR AddMovingSpotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddMovingSpotRequest(const AddMovingSpotRequest& from);
  AddMovingSpotRequest(AddMovingSpotRequest&& from) noexcept
    : AddMovingSpotRequest() {
    *this = ::std::move(from);
  }

  inline AddMovingSpotRequest& operator=(const AddMovingSpotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddMovingSpotRequest& operator=(AddMovingSpotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddMovingSpotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddMovingSpotRequest* internal_default_instance() {
    return reinterpret_cast<const AddMovingSpotRequest*>(
               &_AddMovingSpotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddMovingSpotRequest& a, AddMovingSpotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddMovingSpotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddMovingSpotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddMovingSpotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddMovingSpotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddMovingSpotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddMovingSpotRequest& from) {
    AddMovingSpotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMovingSpotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mastodon_blender_view.AddMovingSpotRequest";
  }
  protected:
  explicit AddMovingSpotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 2,
    kTimepointsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated float coordinates = 2;
  int coordinates_size() const;
  private:
  int _internal_coordinates_size() const;
  public:
  void clear_coordinates();
  private:
  float _internal_coordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_coordinates() const;
  void _internal_add_coordinates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_coordinates();
  public:
  float coordinates(int index) const;
  void set_coordinates(int index, float value);
  void add_coordinates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      coordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_coordinates();

  // repeated int32 timepoints = 3;
  int timepoints_size() const;
  private:
  int _internal_timepoints_size() const;
  public:
  void clear_timepoints();
  private:
  int32_t _internal_timepoints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_timepoints() const;
  void _internal_add_timepoints(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_timepoints();
  public:
  int32_t timepoints(int index) const;
  void set_timepoints(int index, int32_t value);
  void add_timepoints(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      timepoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_timepoints();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:mastodon_blender_view.AddMovingSpotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > coordinates_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > timepoints_;
    mutable std::atomic<int> _timepoints_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mastodon_blender_view.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mastodon_blender_view.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mastodon_blender_view.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddMovingSpotRequest

// string id = 1;
inline void AddMovingSpotRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AddMovingSpotRequest::id() const {
  // @@protoc_insertion_point(field_get:mastodon_blender_view.AddMovingSpotRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddMovingSpotRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mastodon_blender_view.AddMovingSpotRequest.id)
}
inline std::string* AddMovingSpotRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:mastodon_blender_view.AddMovingSpotRequest.id)
  return _s;
}
inline const std::string& AddMovingSpotRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AddMovingSpotRequest::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AddMovingSpotRequest::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AddMovingSpotRequest::release_id() {
  // @@protoc_insertion_point(field_release:mastodon_blender_view.AddMovingSpotRequest.id)
  return _impl_.id_.Release();
}
inline void AddMovingSpotRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mastodon_blender_view.AddMovingSpotRequest.id)
}

// repeated float coordinates = 2;
inline int AddMovingSpotRequest::_internal_coordinates_size() const {
  return _impl_.coordinates_.size();
}
inline int AddMovingSpotRequest::coordinates_size() const {
  return _internal_coordinates_size();
}
inline void AddMovingSpotRequest::clear_coordinates() {
  _impl_.coordinates_.Clear();
}
inline float AddMovingSpotRequest::_internal_coordinates(int index) const {
  return _impl_.coordinates_.Get(index);
}
inline float AddMovingSpotRequest::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:mastodon_blender_view.AddMovingSpotRequest.coordinates)
  return _internal_coordinates(index);
}
inline void AddMovingSpotRequest::set_coordinates(int index, float value) {
  _impl_.coordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:mastodon_blender_view.AddMovingSpotRequest.coordinates)
}
inline void AddMovingSpotRequest::_internal_add_coordinates(float value) {
  _impl_.coordinates_.Add(value);
}
inline void AddMovingSpotRequest::add_coordinates(float value) {
  _internal_add_coordinates(value);
  // @@protoc_insertion_point(field_add:mastodon_blender_view.AddMovingSpotRequest.coordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AddMovingSpotRequest::_internal_coordinates() const {
  return _impl_.coordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
AddMovingSpotRequest::coordinates() const {
  // @@protoc_insertion_point(field_list:mastodon_blender_view.AddMovingSpotRequest.coordinates)
  return _internal_coordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AddMovingSpotRequest::_internal_mutable_coordinates() {
  return &_impl_.coordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
AddMovingSpotRequest::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:mastodon_blender_view.AddMovingSpotRequest.coordinates)
  return _internal_mutable_coordinates();
}

// repeated int32 timepoints = 3;
inline int AddMovingSpotRequest::_internal_timepoints_size() const {
  return _impl_.timepoints_.size();
}
inline int AddMovingSpotRequest::timepoints_size() const {
  return _internal_timepoints_size();
}
inline void AddMovingSpotRequest::clear_timepoints() {
  _impl_.timepoints_.Clear();
}
inline int32_t AddMovingSpotRequest::_internal_timepoints(int index) const {
  return _impl_.timepoints_.Get(index);
}
inline int32_t AddMovingSpotRequest::timepoints(int index) const {
  // @@protoc_insertion_point(field_get:mastodon_blender_view.AddMovingSpotRequest.timepoints)
  return _internal_timepoints(index);
}
inline void AddMovingSpotRequest::set_timepoints(int index, int32_t value) {
  _impl_.timepoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:mastodon_blender_view.AddMovingSpotRequest.timepoints)
}
inline void AddMovingSpotRequest::_internal_add_timepoints(int32_t value) {
  _impl_.timepoints_.Add(value);
}
inline void AddMovingSpotRequest::add_timepoints(int32_t value) {
  _internal_add_timepoints(value);
  // @@protoc_insertion_point(field_add:mastodon_blender_view.AddMovingSpotRequest.timepoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AddMovingSpotRequest::_internal_timepoints() const {
  return _impl_.timepoints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
AddMovingSpotRequest::timepoints() const {
  // @@protoc_insertion_point(field_list:mastodon_blender_view.AddMovingSpotRequest.timepoints)
  return _internal_timepoints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AddMovingSpotRequest::_internal_mutable_timepoints() {
  return &_impl_.timepoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
AddMovingSpotRequest::mutable_timepoints() {
  // @@protoc_insertion_point(field_mutable_list:mastodon_blender_view.AddMovingSpotRequest.timepoints)
  return _internal_mutable_timepoints();
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mastodon_blender_view

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
